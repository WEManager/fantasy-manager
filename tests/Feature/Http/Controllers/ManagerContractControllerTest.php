<?php

namespace Tests\Feature\Http\Controllers;

use App\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

/**
 * @see \App\Http\Controllers\ManagerContractController
 */
class ManagerContractControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $club = factory(\App\Club::class)->create();

        $response = $this->get(route('apply_for_job', ['locale' => 'en', $club]));
        $response->assertStatus(302);

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('apply_for_job', ['locale' => 'en', $club]));
        $response->assertOk();
    }

    /**
     * @test
     */
    public function quit_job_returns_an_ok_response()
    {
        //$this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $club = factory(\App\Club::class)->create();
        $user = factory(\App\User::class)->create();
        $manager_contract = factory(\App\ManagerContract::class)->create([
            'club_id' => $club->id, 'user_id' => $user->id,
        ]);

        $response = $this->actingAs($user)->get(route('quit_job', ['locale' => 'en', $club]));

        $response->assertOk();
        $response->assertViewIs('manager-contracts.quit');
        $response->assertViewHas('club');
        $response->assertViewHas('boardMessage');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $club = factory(\App\Club::class)->create();
        $manager = factory(User::class)->create();
        $unmanagedClub = factory(\App\Club::class)->create();
        $unemployedManagerWithoutLicense = factory(User::class)->create();
        $unemployedManager = factory(User::class)->create(['level' => 1]);
        factory(\App\ManagerContract::class)->create([
            'user_id' => $manager->id, 'club_id' => $club->id,
        ]);

        $response = $this->post(route('send_job_application', ['locale' => 'en']), [
            'club_id' => $club->id,
        ]);
        $response->assertStatus(302);

        $loggedIn = $this->actingAs($manager)->post(route('send_job_application', ['locale' => 'en']), [
            'club_id' => $club->id,
        ]);
        $loggedIn->assertStatus(302);

        $unemployed = $this->actingAs($unemployedManagerWithoutLicense)->post(route('send_job_application', ['locale' => 'en']), [
            'club_id' => $unmanagedClub->id,
        ]);
        $unemployed->assertRedirect(link_route('license_test', ['licenseQuiz' => 1]));

        $unemployed = $this->actingAs($unemployedManager)->post(route('send_job_application', ['locale' => 'en']), [
            'club_id' => $unmanagedClub->id,
        ]);
    }
}
