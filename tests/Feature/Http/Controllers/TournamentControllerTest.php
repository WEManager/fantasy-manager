<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\TournamentController
 */
class TournamentControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->getJson(route('tournaments.create'));

        $response->assertOk();
        $response->assertViewIs('tournaments.create');
        $response->assertViewHas('clubs');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->getJson(route('tournaments.index'));

        $response->assertOk();
        $response->assertViewIs('tournaments.index');
        $response->assertViewHas('tournaments');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $tournament = factory(\App\Tournament::class)->create();

        $response = $this->getJson(route('tournaments.show', [$tournament]));

        $response->assertOk();
        $response->assertViewIs();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $tournament = factory(\App\Tournament::class)->create();

        $response = $this->post(route('store_tournament', ['locale' => $tournament->locale]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('show_tournament');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\TournamentController::class,
            'store',
            \App\Http\Requests\StoreTournament::class
        );
    }

    // test cases...
}
